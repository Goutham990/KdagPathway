# Research Paper Evaluation API Documentation

## Base URL: /api/v1

### Authentication
python
@app.middleware("http")
async def authenticate(request: Request, call_next):
    api_key = request.headers.get("X-API-Key")
    if not api_key or not validate_api_key(api_key):
        return JSONResponse(status_code=401, content={"error": "Invalid API key"})
    return await call_next(request)


### Endpoints

#### 1. Evaluate Paper Publishability
POST /evaluate/publishability

Request Body:
json
{
    "paper_content": "string",
    "paper_id": "string",
    "metadata": {
        "title": "string",
        "authors": ["string"],
        "keywords": ["string"]
    }
}


Response:
json
{
    "paper_id": "string",
    "publishable": boolean,
    "confidence_score": float,
    "reasons": ["string"],
    "suggestions": ["string"]
}


#### 2. Conference Selection
POST /evaluate/conference

Request Body:
json
{
    "paper_id": "string",
    "paper_content": "string",
    "is_publishable": boolean
}


Response:
json
{
    "paper_id": "string",
    "recommended_conference": "string",
    "confidence_score": float,
    "rationale": "string",
    "alternative_conferences": ["string"]
}


#### 3. Batch Processing
POST /batch/evaluate

Request Body:
json
{
    "papers": [
        {
            "paper_id": "string",
            "content": "string",
            "metadata": object
        }
    ]
}


Response:
json
{
    "results": [
        {
            "paper_id": "string",
            "publishable": boolean,
            "conference": "string",
            "rationale": "string"
        }
    ],
    "batch_metrics": {
        "processing_time": float,
        "success_rate": float
    }
}